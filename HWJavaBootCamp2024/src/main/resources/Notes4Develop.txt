/*

    public Function<PaymentOrder, List<Object>> compositeKeyTDEDt = paymentOrderRecord ->
            Arrays.<Object>asList(paymentOrderRecord.getIdType(),
                    paymentOrderRecord.getIdDepartment(),
                    paymentOrderRecord.getIdEmployee(),
                    paymentOrderRecord.getDatePayment());

    public Function<PaymentOrder, List<Object>> compositeKeyDEDt = paymentOrderRecord ->
            Arrays.<Object>asList(paymentOrderRecord.getIdDepartment(),
                    paymentOrderRecord.getIdEmployee(),
                    paymentOrderRecord.getDatePayment());

    public Function<PaymentOrder, List<Object>> compositeKeyDE = paymentOrderRecord ->
            Arrays.<Object>asList(paymentOrderRecord.getIdDepartment(),
                    paymentOrderRecord.getIdEmployee());


        Map<Object, List<Double>> map1 = paymentOrders.stream()
                .filter(
                        PaymentOrder-> PaymentOrder.getIdType() != null &&
                                PaymentOrder.getIdDepartment() != null &&
                                PaymentOrder.getDatePayment() != null
                )
                .collect(
                        groupingBy(PaymentOrder::getCompositeKeyDEDt,
                        mapping(PaymentOrder::getId, toList()),
                        summingDouble(PaymentOrder::getAmount)
                ));
*/
        /*
        Map<Object, List<Double>> map1 = paymentOrders.stream()
                .filter(
                        PaymentOrder-> PaymentOrder.getIdType() != null &&
                                       PaymentOrder.getIdDepartment() != null &&
                                       PaymentOrder.getDatePayment() != null
                        )
                .collect(groupingBy(PaymentOrder::compositeKeyDEDt,
                        mapping(PaymentOrder::getId, toList()),
                        summingDouble(PaymentOrder::getAmount)
                ));
*/
        Map<Long, Double> map = paymentOrders.stream()
                .collect(groupingBy(PaymentOrder::getIdEmployee,
                         summingDouble(PaymentOrder::getAmount)));
/*
products.stream()
        .collect(Collectors.groupingBy(product -> product.getCategory()));

Map<Object, List<Integer>> map = persons.stream()
    .collect(groupingBy(person -> new Pair<>(person.salary(), person.department()),
        mapping(Person::id, toList())));

        private Long    id;
        private String  paymentTypeName;
        private String  departmentCode;
        private String  departmentName;
        private String  employeeSurname;
        private String  employeeName;
        private String  employeePatronymic;
        private Double  amountPaymentOrder;

PaymentOrder
    private Long   idType;
    private Long   idDepartment;
    private Long   idEmployee;
    private Date   datePayment;
    private Double amount;

*/
        Map<Long, Double> map2 = paymentOrders.stream()
                .collect(groupingBy(PaymentOrder::getIdEmployee,
                        summingDouble(PaymentOrder::getAmount)));
/*
                        Map<String, Integer> map3 = humans.stream()
                                .collect(groupingBy(Human::getSurname,
                                        Collectors.summingInt(Human::getFriendsAmount)));
*/




        Map<Long, Double> mapEmpDeptAmount = paymentOrders.stream()
                .filter(
                        PaymentOrder-> PaymentOrder.getIdType() != null &&
                                PaymentOrder.getIdDepartment() != null &&
                                PaymentOrder.getIdEmployee() != null &&
                                PaymentOrder.getDatePayment() != null
                )
                .collect(groupingBy(PaymentOrder::getIdEmployee,
                        summingDouble(PaymentOrder::getAmount)));

        Map<Object, Double> mapIdEmpAmount1 =
        paymentOrders.stream()
                .collect(groupingBy(paymentOrderRepository.compositeKeyDEDt,
                                //mapping(PaymentOrder::getIdEmployee, toList()),
                                summingDouble(PaymentOrder::getAmount)));

        Map<Object, Double> mapIdEmpAmount2 = paymentOrders.stream()
                .filter(
                        PaymentOrder-> PaymentOrder.getIdType() != null &&
                                PaymentOrder.getIdDepartment() != null &&
                                PaymentOrder.getDatePayment() != null
                )
                .collect(
                        groupingBy(paymentOrderRepository.compositeKeyDEDt,
//                                mapping(PaymentOrder::getId, toList()),
                                summingDouble(PaymentOrder::getAmount)
                        ));


        //mapIdEmpAmount.forEach((v1,v2)->calcAgrPaymentOrders0.add(new AgrPaymentOrder(e->new Random(), v1, v2));
        //mapIdEmpAmount2.forEach((v1,v2)->calcAgrPaymentOrders0.add(new AgrPaymentOrder(e->new Random(), v1, v2,0, );
/*
        List<AgrPaymentOrder> calcAgrPaymentOrders =
                paymentOrders.stream()
                .filter(
                        PaymentOrder-> PaymentOrder.getIdType() != null &&
                                PaymentOrder.getIdDepartment() != null &&
                                PaymentOrder.getDatePayment() != null
                )
                .collect(
                        groupingBy(paymentOrderRepository.compositeKeyDEDt,
                                Collectors.mapping(PaymentOrder -> new AgrPaymentOrder(agrPaymentOrderRepository.generateIdAgrPaymentOrder(),
                                        paymentTypeRepository.findById(1L).get().getName(),
                                        departmentRepository.findById(1L).get().getCode(),
                                        departmentRepository.findById(1L).get().getName(),
                                        employeeRepository.findByIdAndIdDept(1L,2L).get().getSurname(),
                                        employeeRepository.findByIdAndIdDept(1L,2L).get().getName(),
                                        employeeRepository.findByIdAndIdDept(1L,2L).get().getPatronymic(),
                                        0.0) , toList()),
                                summingDouble(PaymentOrder::getAmount)
                        ));
*/

        /*

List<TennisPlayerCandidate> result = EMPLOYEES.stream()
  .filter(e -> e.getHobbies().contains("Tennis"))
  .collect(Collectors.mapping(e -> new TennisPlayerCandidate(e.getName(), e.getEmail()), Collectors.toList()));
assertEquals(EXPECTED, result);
        List<AgrPaymentOrder> calcAgrPaymentOrders =  new ArrayList<>(
                paymentOrders.stream()
                .filter(
                        PaymentOrder-> PaymentOrder.getIdType() != null &&
                                PaymentOrder.getIdDepartment() != null &&
                                PaymentOrder.getIdEmployee() != null &&
                                PaymentOrder.getDatePayment() != null
                )
                .collect(groupingBy(PaymentOrder::getIdEmployee,
                        summingDouble(PaymentOrder::getAmount)))    );
*/
